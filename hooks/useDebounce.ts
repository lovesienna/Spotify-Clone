import { useEffect, useState } from "react";

function useDebounce<T>(value: T, delay?: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const timer = setTimeout(() => setDebouncedValue(value), delay || 500);

    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);

  return debouncedValue;
}

export default useDebounce;

// useDebounce 훅 사용하는 이유

//사용자가 검색어를 입력할 때마다 검색 요청을 즉시 보내는 대신,
//입력이 끝나고 일정 시간이 지난 후에 검색 요청을 보내는 것이 성능과 사용성 측면에서 유리

//Reduces Unnecessary Requests: 사용자가 검색어를 입력하는 동안 입력이 계속 변경되고 업데이트되는 상황에서, 매번 입력이 변경될 때마다 즉시 검색 요청을 보낸다면 불필요한 서버 요청이 발생할 수 있습니다. 입력이 바뀌기 전에 다음 입력이 이미 들어오기 때문에 많은 중복 요청이 발생하게 될 수 있습니다.
//Minimizes Server Load: 서버에 많은 동시 요청이 발생하는 것을 방지합니다. 지연 시간을 적절히 조정하여 일정 시간 동안 입력이 없을 때에만 검색 요청을 보내면, 서버에 대한 부하를 줄일 수 있습니다.
//Better User Experience: 사용자가 입력하는 동안 검색 결과가 실시간으로 표시되는 것이 아니라, 입력이 완료된 후에 검색 결과가 보여지면 사용자가 더 나은 검색 경험을 할 수 있습니다. 이는 검색어를 정확하게 입력한 후에 결과를 확인할 수 있게 하여, 더 집중적이고 유용한 검색을 할 수 있도록 돕습니다.
//Fewer Network Requests: 빈번한 네트워크 요청은 사용자의 데이터 사용량을 증가시킬 수 있습니다. 지연 시간을 적절하게 설정하여 네트워크 트래픽을 줄일 수 있습니다.
//Improved Responsiveness: 사용자가 빠르게 입력하는 경우, 디바운스를 적용하지 않으면 입력이 자주 업데이트되면서 결과가 계속해서 바뀌는 상황이 발생할 수 있습니다. 디바운스를 적용하여 입력이 멈추고 일정 시간이 지난 후에 검색 요청을 보내면, 결과가 고정되고 더 일관성 있고 반응성 있는 사용자 경험을 제공할 수 있습니다.

// 그 밖에 유용한 사용 사례

//검색 기능: 사용자가 검색어를 입력할 때마다 검색 요청을 즉시 보내는 대신, 입력이 끝나고 일정 시간이 지난 후에 검색 요청을 보내는 것이 성능과 사용성 측면에서 유리합니다. useDebounce를 사용하여 검색어를 지연 시간 이후에 서버로 보내는 방식으로 구현할 수 있습니다.
//실시간 필터링: 사용자 인터페이스의 필터링 기능에서도 useDebounce를 사용하여 사용자가 옵션을 선택하는 동안 필터링 요청을 딜레이 처리하여 사용자 경험을 향상시킬 수 있습니다.
//자동완성 기능: 자동완성 또는 추천 기능을 구현할 때 사용자가 입력하는 내용을 실시간으로 처리하지 않고, 입력이 일시적으로 멈춘 후에 추천 결과를 보여주는 것이 일반적입니다.
//폼 유효성 검사: 폼 입력 필드의 유효성을 검사할 때, useDebounce를 사용하여 사용자가 입력을 마친 후에 유효성을 확인하고 오류 메시지를 표시하는 것이 좋을 수 있습니다.
//지도 인터랙션: 지도 뷰에서 확대/축소나 이동과 같은 인터랙션을 제어할 때, 지속적인 변경이 아닌 사용자의 인터랙션 종료 후에만 지도의 상태를 업데이트하는데 사용될 수 있습니다.
